#!/usr/bin/env node

require('babel-polyfill');
global.fetch = require('isomorphic-fetch');

const fs = require('fs');
const prompt = require('prompt');
const yargs = require('yargs');
const Client4 = require('mattermost-redux/client/client4').default;

const Const = require('../lib/helpers/const');
const ActionList = Const.ActionList;
const ActionTypes = Const.ActionTypes;

const exportEmoji = require('../lib/actions/exportEmoji');
const importEmoji = require('../lib/actions/importEmoji');

if (yargs.argv._.length < 1) {
    console.error('emojiporter <action> <userProvideToken>');
    return;
}

// Validate action
const action = yargs.argv._[0];
if (ActionList.indexOf(action) < 0) {
    console.error(`${action} is an invalid action. It must be one of [${ActionList}]`)
    return;
}
const userProvideToken = yargs.argv._[1] === 'true';

const runAction = (client, id, params) => {
    switch (action) {
        case ActionTypes.EXPORT:
            exportEmoji(client, params.exportTitle, params.exportFile);
            break;
        case ActionTypes.IMPORT:
            importEmoji(client, id, params.importFile);
            break;
        default:
            console.error(`${action} is an invalid action.`);
            break;
    }
}

const schema = {
    properties: {
        url: {
            message: 'Mattermost Server URL',
            required: true
        },
        token: {
            message: 'MMAUTHTOKEN',
            required: true,
            ask: () => {
                return userProvideToken;
            }
        },
        id: {
            message: 'MMUSERID',
            required: true,
            ask: () => {
                return userProvideToken;
            }
        },
        loginId: {
            message: 'Username or e-mail',
            required: true,
            ask: () => {
                return !userProvideToken;
            }
        },
        password: {
            message: 'Password',
            hidden: true,
            required: true,
            ask: () => {
                return !userProvideToken;
            }
        },
        mfaToken: {
            message: 'MFA Token (optional)',
            required: false,
            ask: () => {
                return !userProvideToken;
            }
        },
        exportTitle: {
            message: 'Export title',
            ask: () => {
                return action === ActionTypes.EXPORT;
            }
        },
        exportFile: {
            message: 'Export file (.yaml)',
            ask: () => {
                return action === ActionTypes.EXPORT;
            }
        },
        importFile: {
            message: 'Import file (.yaml)',
            ask: () => {
                return action === ActionTypes.IMPORT;
            }
        }
    }
};


// Process the info required to perform the action
prompt.override = yargs.argv;
prompt.message = '';
prompt.start();
prompt.get(schema, (err, params) => {

    // Team info
    const url = params.url;

    // Login with auth.
    const token = params.token;
    const id = params.id;

    // Login with ldap/user info
    const loginId = params.loginId;
    const password = params.password;
    const mfaToken = params.mfaToken || undefined;

    const client = new Client4();
    client.setUrl(url);

    if (!token) {
        client.login(loginId, password, mfaToken)
        .then(data => {
          console.log('Login success');
          runAction(client, data.id, params);
        })
        .catch(err => {
          console.log('Login error:', err);
        })
    } else {
        client.setToken(token);
        console.log('Running request with provided token and id');
        runAction(client, id, params);
    }
});
